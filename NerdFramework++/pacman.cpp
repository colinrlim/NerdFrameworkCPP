#include "pacman.h"
#include "PaletteTileBatcher.h"
#include "PaletteImage.h"
#include "Interface.h"
#include "Grid2.h"
#include <vector>
#include "Math.h"
#include <iostream>
#include "GameState.h"
#include "PaletteImageStamper.h"
#include "Enemy.h"
#include "PacmanToolbox.h"
#include "Player.h"

void launch() {
	PaletteImage zero(8, 8, std::vector<uint8_t>{
		0,0,0,1,1,1,0,0,
		0,0,1,0,0,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,0,0,1,0,
		0,0,0,1,1,1,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage one(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,1,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage two(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,1,1,1,
		0,0,0,1,1,1,1,0,
		0,0,1,1,1,1,0,0,
		0,1,1,1,0,0,0,0,
		0,1,1,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage three(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,1,1,
		0,0,0,0,0,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,1,1,0,
		0,0,0,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage four(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,1,1,0,
		0,0,0,1,1,1,1,0,
		0,0,1,1,0,1,1,0,
		0,1,1,0,0,1,1,0,
		0,1,1,1,1,1,1,1,
		0,0,0,0,0,1,1,0,
		0,0,0,0,0,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage five(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,1,1,0,
		0,1,1,0,0,0,0,0,
		0,1,1,1,1,1,1,0,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage six(8, 8, std::vector<uint8_t>{
		0,0,0,1,1,1,1,0,
		0,0,1,1,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage seven(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,1,1,1,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage eight(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,0,0,
		0,1,1,0,0,0,1,0,
		0,1,1,1,0,0,1,0,
		0,0,1,1,1,1,0,0,
		0,1,0,0,1,1,1,1,
		0,1,0,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage nine(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,1,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,1,1,0,
		0,0,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0,
	});
	
	PaletteImage _zero(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,
		0,0,1,0,0,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,0,0,1,0,
		0,0,0,1,1,1,0,0,
	});
	PaletteImage _one(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,1,1,1,1,1,1,
	});
	PaletteImage _two(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,1,1,1,
		0,0,0,1,1,1,1,0,
		0,0,1,1,1,1,0,0,
		0,1,1,1,0,0,0,0,
		0,1,1,1,1,1,1,1,
	});
	PaletteImage _three(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,1,1,1,1,1,1,
		0,0,0,0,0,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,1,1,0,
		0,0,0,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
	});
	PaletteImage _four(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,1,1,1,0,
		0,0,0,1,1,1,1,0,
		0,0,1,1,0,1,1,0,
		0,1,1,0,0,1,1,0,
		0,1,1,1,1,1,1,1,
		0,0,0,0,0,1,1,0,
		0,0,0,0,0,1,1,0,
	});
	PaletteImage _five(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,1,1,1,1,1,1,0,
		0,1,1,0,0,0,0,0,
		0,1,1,1,1,1,1,0,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
	});
	PaletteImage _six(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,1,0,
		0,0,1,1,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
	});
	PaletteImage _seven(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,1,1,1,1,1,1,1,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,1,0,0,0,
	});
	PaletteImage _eight(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,1,1,1,1,0,0,
		0,1,1,0,0,0,1,0,
		0,1,1,1,0,0,1,0,
		0,0,1,1,1,1,0,0,
		0,1,0,0,1,1,1,1,
		0,1,0,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
	});
	PaletteImage _nine(8, 8, std::vector<uint8_t>{
		0, 0, 0, 0, 0, 0, 0, 0,
		0,0,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,1,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,1,1,0,
		0,0,1,1,1,1,0,0,
	});

	PaletteImage A(8, 8, std::vector<uint8_t>{
		0,0,0,1,1,1,0,0,
		0,0,1,1,0,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,1,1,1,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage B(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,1,1,0,
		0,1,0,0,0,0,1,1,
		0,1,0,0,0,0,1,1,
		0,1,1,1,1,1,1,0,
		0,1,0,0,0,0,1,1,
		0,1,0,0,0,0,1,1,
		0,1,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage C(8, 8, std::vector<uint8_t>{
		0,0,0,1,1,1,1,0,
		0,0,1,1,0,0,1,1,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,0,1,1,0,0,1,1,
		0,0,0,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage D(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,1,0,0,
		0,1,1,0,0,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,1,1,0,
		0,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage E(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,1,1,
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,1,1,1,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage F(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,1,1,1,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,1,1,1,1,0,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage G(8, 8, std::vector<uint8_t>{
		0,0,0,1,1,1,1,1,
		0,0,1,1,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,1,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,0,0,1,1,
		0,0,0,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage H(8, 8, std::vector<uint8_t>{
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,1,1,1,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage I(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,1,1,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,1,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage J(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage K(8, 8, std::vector<uint8_t>{
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,1,1,0,
		0,1,1,0,1,1,0,0,
		0,1,1,1,1,0,0,0,
		0,1,1,1,1,1,0,0,
		0,1,1,0,1,1,1,0,
		0,1,1,0,0,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage L(8, 8, std::vector<uint8_t>{
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,0,0,0,0,
		0,0,1,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage M(8, 8, std::vector<uint8_t>{
		0,1,1,0,0,0,1,1,
		0,1,1,1,0,1,1,1,
		0,1,1,1,1,1,1,1,
		0,1,1,1,1,1,1,1,
		0,1,1,0,1,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage N(8, 8, std::vector<uint8_t>{
		0,1,1,0,0,0,1,1,
		0,1,1,1,0,0,1,1,
		0,1,1,1,1,0,1,1,
		0,1,1,1,1,1,1,1,
		0,1,1,0,1,1,1,1,
		0,1,1,0,0,1,1,1,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage O(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage P(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,1,1,1,1,0,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage Q(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,1,1,1,1,
		0,1,1,0,0,1,1,0,
		0,0,1,1,1,1,0,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage R(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,1,1,0,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,1,1,1,
		0,1,1,1,1,1,0,0,
		0,1,1,0,1,1,1,0,
		0,1,1,0,0,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage S(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,0,0,
		0,1,1,0,0,1,1,0,
		0,1,1,0,0,0,0,0,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage T(8, 8, std::vector<uint8_t>{
		0,0,1,1,1,1,1,1,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage U(8, 8, std::vector<uint8_t>{
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage V(8, 8, std::vector<uint8_t>{
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,1,0,1,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,1,1,1,0,0,
		0,0,0,0,1,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage W(8, 8, std::vector<uint8_t>{
		0,1,1,0,0,0,1,1,
		0,1,1,0,0,0,1,1,
		0,1,1,0,1,0,1,1,
		0,1,1,1,1,1,1,1,
		0,1,1,1,1,1,1,1,
		0,1,1,1,0,1,1,1,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage X(8, 8, std::vector<uint8_t>{
		0,1,1,0,0,0,1,1,
		0,1,1,1,0,1,1,1,
		0,0,1,1,1,1,1,0,
		0,0,0,1,1,1,0,0,
		0,0,1,1,1,1,1,0,
		0,1,1,1,0,1,1,1,
		0,1,1,0,0,0,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage Y(8, 8, std::vector<uint8_t>{
		0,0,1,1,0,0,1,1,
		0,0,1,1,0,0,1,1,
		0,0,1,1,0,0,1,1,
		0,0,0,1,1,1,1,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,1,1,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage Z(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,1,1,1,
		0,0,0,0,0,1,1,1,
		0,0,0,0,1,1,1,0,
		0,0,0,1,1,1,0,0,
		0,0,1,1,1,0,0,0,
		0,1,1,1,0,0,0,0,
		0,1,1,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage period(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage comma(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,1,1,0,0,0,0,0,
		0,0,1,0,0,0,0,0,
	});
	PaletteImage exclamation(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,1,1,0,
		0,0,0,0,1,1,1,0,
		0,0,0,1,1,1,0,0,
		0,0,0,1,1,0,0,0,
		0,0,0,1,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,1,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage quote(8, 8, std::vector<uint8_t>{
		0,0,1,1,0,1,1,0,
		0,0,1,1,0,1,1,0,
		0,0,0,1,0,0,1,0,
		0,0,1,0,0,1,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});

	const uint32_t f = Color4(255, 185, 175).toInteger();
	PaletteImage lil_food(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,3,3,0,0,0,
		0,0,0,3,3,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage mid_food(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,3,3,0,0,0,
		0,0,3,3,3,3,0,0,
		0,0,3,3,3,3,0,0,
		0,0,0,3,3,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage big_food(8, 8, std::vector<uint8_t>{
		0,0,3,3,3,3,0,0,
		0,3,3,3,3,3,3,0,
		3,3,3,3,3,3,3,3,
		3,3,3,3,3,3,3,3,
		3,3,3,3,3,3,3,3,
		3,3,3,3,3,3,3,3,
		0,3,3,3,3,3,3,0,
		0,0,3,3,3,3,0,0,
	});

	PaletteImage wall_fill(8, 8, 2);
	PaletteImage reg_1(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,1,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
	});
	PaletteImage reg_2(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
	});
	PaletteImage reg_3(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		1,1,0,0,0,0,0,0,
		2,2,1,0,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
	});
	PaletteImage reg_4(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
	});
	PaletteImage reg_5(8, 8, std::vector<uint8_t>{
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
	});
	PaletteImage reg_6(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,0,1,2,2,
		0,0,0,0,0,0,1,1,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage reg_7(8, 8, std::vector<uint8_t>{
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		1,1,1,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage reg_8(8, 8, std::vector<uint8_t>{
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,1,0,0,0,0,0,
		1,1,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	
	PaletteImage big_1(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,1,1,1,
		0,0,1,1,2,2,2,2,
		0,1,2,2,2,2,2,2,
		0,1,2,2,2,1,1,1,
		1,2,2,2,1,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
	});
	PaletteImage big_2(8, 8, std::vector<uint8_t>{
		1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		1,1,1,1,1,1,1,1,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage big_3(8, 8, std::vector<uint8_t>{
		1,1,1,1,0,0,0,0,
		2,2,2,2,1,1,0,0,
		2,2,2,2,2,2,1,0,
		1,1,1,2,2,2,1,0,
		0,0,0,1,2,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
	});
	PaletteImage big_4(8, 8, std::vector<uint8_t>{
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
	});
	PaletteImage big_5(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
	});
	PaletteImage big_6(8, 8, std::vector<uint8_t>{
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,2,1,0,0,0,
		0,1,2,2,2,1,1,1,
		0,1,2,2,2,2,2,2,
		0,0,1,1,2,2,2,2,
		0,0,0,0,1,1,1,1,
	});
	PaletteImage big_7(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		1,1,1,1,1,1,1,1,
	});
	PaletteImage big_8(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,1,2,2,2,1,
		1,1,1,2,2,2,1,0,
		2,2,2,2,2,2,1,0,
		2,2,2,2,1,1,0,0,
		1,1,1,1,0,0,0,0,
	});

	PaletteImage sqr_1(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,1,1,1,1,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,1,
	});
	PaletteImage sqr_2(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage sqr_3(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		1,1,1,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
	});
	PaletteImage sqr_6(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,1,1,1,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage sqr_8(8, 8, std::vector<uint8_t>{
		1,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		1,1,1,1,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	
	PaletteImage unq_1(8, 8, std::vector<uint8_t>{
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,2,1,0,0,0,
		1,2,2,2,2,1,1,1,
		1,2,2,2,2,2,2,2,
		1,2,2,2,2,2,2,2,
		1,2,2,2,2,2,2,2,
	});
	PaletteImage unq_2(8, 8, std::vector<uint8_t>{
		1,2,2,2,2,2,2,2,
		1,2,2,2,2,2,2,2,
		1,2,2,2,2,2,2,2,
		1,2,2,2,2,1,1,1,
		1,2,2,2,1,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
		1,2,2,1,0,0,0,0,
	});
	PaletteImage unq_3(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,1,2,2,2,1,
		1,1,1,2,2,2,2,1,
		2,2,2,2,2,2,2,1,
		2,2,2,2,2,2,2,1,
		2,2,2,2,2,2,2,1,
	});
	PaletteImage unq_4(8, 8, std::vector<uint8_t>{
		2,2,2,2,2,2,2,1,
		2,2,2,2,2,2,2,1,
		2,2,2,2,2,2,2,1,
		1,1,1,2,2,2,2,1,
		0,0,0,1,2,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
		0,0,0,0,1,2,2,1,
	});
	PaletteImage unq_5(8, 8, std::vector<uint8_t>{
		1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		1,1,1,2,2,2,2,2,
		0,0,0,1,2,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
	});
	PaletteImage unq_6(8, 8, std::vector<uint8_t>{
		1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,1,1,1,
		2,2,2,2,1,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
	});
	PaletteImage unq_7(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		1,1,1,1,1,1,1,1,
		2,2,2,2,2,2,2,1,
		2,2,2,2,2,2,2,1,
		1,1,1,1,1,1,1,1,
	});
	PaletteImage unq_8(8, 8, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		1,1,1,1,1,1,1,1,
		1,2,2,2,2,2,2,2,
		1,2,2,2,2,2,2,2,
		1,1,1,1,1,1,1,1,
	});

	PaletteImage cnv_1(8, 8, std::vector<uint8_t>{
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,1,1,1,
		2,2,2,2,1,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
	});
	PaletteImage cnv_2(8, 8, std::vector<uint8_t>{
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		1,1,1,2,2,2,2,2,
		0,0,0,1,2,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
	});
	PaletteImage cnv_3(8, 8, std::vector<uint8_t>{
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,1,0,0,0,0,
		2,2,2,2,1,0,0,0,
		2,2,2,2,2,1,1,1,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
	});
	PaletteImage cnv_4(8, 8, std::vector<uint8_t>{
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,0,1,2,2,2,
		0,0,0,1,2,2,2,2,
		1,1,1,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
	});

	PaletteImage ghost_up(16, 16, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
		0,0,0,0,2,2,1,1,1,1,2,2,0,0,0,0,
		0,0,0,3,2,2,3,1,1,3,2,2,3,0,0,0,
		0,0,1,3,3,3,3,1,1,3,3,3,3,1,0,0,
		0,0,1,3,3,3,3,1,1,3,3,3,3,1,0,0,
		0,0,1,1,3,3,1,1,1,1,3,3,1,1,0,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	});
	PaletteImage ghost_down(16, 16, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
		0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
		0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
		0,0,1,1,3,3,1,1,1,1,3,3,1,1,0,0,
		0,0,1,3,3,3,3,1,1,3,3,3,3,1,0,0,
		0,1,1,3,3,3,3,1,1,3,3,3,3,1,1,0,
		0,1,1,3,2,2,3,1,1,3,2,2,3,1,1,0,
		0,1,1,1,2,2,1,1,1,1,2,2,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	});
	PaletteImage ghost_left(16, 16, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
		0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
		0,0,1,3,3,1,1,1,1,3,3,1,1,1,0,0,
		0,0,3,3,3,3,1,1,3,3,3,3,1,1,0,0,
		0,0,2,2,3,3,1,1,2,2,3,3,1,1,0,0,
		0,1,2,2,3,3,1,1,2,2,3,3,1,1,1,0,
		0,1,1,3,3,1,1,1,1,3,3,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	});
	PaletteImage ghost_right(16, 16, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
		0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
		0,0,1,1,1,3,3,1,1,1,1,3,3,1,0,0,
		0,0,1,1,3,3,3,3,1,1,3,3,3,3,0,0,
		0,0,1,1,3,3,2,2,1,1,3,3,2,2,0,0,
		0,1,1,1,3,3,2,2,1,1,3,3,2,2,1,0,
		0,1,1,1,1,3,3,1,1,1,1,3,3,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	});
	PaletteImage ghost_fright(16, 16, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
		0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,
		0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
		0,0,1,1,1,3,3,1,1,3,3,1,1,1,0,0,
		0,0,1,1,1,3,3,1,1,3,3,1,1,1,0,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,3,3,1,1,3,3,1,1,3,3,1,1,0,
		0,1,3,1,1,3,3,1,1,3,3,1,1,3,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	});

	PaletteImage ghost_legs1(8, 8, std::vector<uint8_t>{
		0,1,1,0,1,1,1,0,
		0,1,0,0,0,1,1,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage ghost_legs2(8, 8, std::vector<uint8_t>{
		0,1,1,1,0,1,1,0,
		0,1,1,0,0,0,1,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage ghost_legs3(8, 8, std::vector<uint8_t>{
		0,1,1,1,1,0,1,1,
		0,0,1,1,0,0,0,1,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});
	PaletteImage ghost_legs4(8, 8, std::vector<uint8_t>{
		1,1,0,1,1,1,1,0,
		1,0,0,0,1,1,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
	});

	PaletteImage player_right1(16, 16, std::vector<uint8_t>{
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
		0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
		0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
		0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	});

	Grid2<uint8_t> board(28, 36, {
		40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,
		40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,
		40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,
		21,22,22,22,22,22,22,22,22,22,22,22,22,95,96,22,22,22,22,22,22,22,22,22,22,22,22,23,
		24,10,10,10,10,10,10,10,10,10,10,10,10,14,15,10,10,10,10,10,10,10,10,10,10,10,10,25,
		24,10,11,12,12,13,10,11,12,12,12,13,10,14,15,10,11,12,12,12,13,10,11,12,12,13,10,25,
		24,30,14,60,60,15,10,14,60,60,60,15,10,14,15,10,14,60,60,60,15,10,14,60,60,15,30,25,
		24,10,16,17,17,18,10,16,17,17,17,18,10,16,18,10,16,17,17,17,18,10,16,17,17,18,10,25,
		24,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,25,
		24,10,11,12,12,13,10,11,13,10,11,12,12,12,12,12,12,13,10,11,13,10,11,12,12,13,10,25,
		24,10,16,17,17,18,10,14,15,10,16,17,17,29,19,17,17,18,10,14,15,10,16,17,17,18,10,25,
		24,10,10,10,10,10,10,14,15,10,10,10,10,14,15,10,10,10,10,14,15,10,10,10,10,10,10,25,
		26,27,27,27,27,13,10,14,39,12,12,13,40,14,15,40,11,12,12,99,15,10,11,27,27,27,27,28,
		40,40,40,40,40,24,10,14,19,17,17,18,40,16,18,40,16,17,17,29,15,10,25,40,40,40,40,40,
		40,40,40,40,40,24,10,14,15,40,40,40,40,40,40,40,40,40,40,14,15,10,25,40,40,40,40,40,
		40,40,40,40,40,24,10,14,15,40,31,27,97,35,35,98,27,37,40,14,15,10,25,40,40,40,40,40,
		22,22,22,22,22,18,10,16,18,40,25,40,40,40,40,40,40,24,40,16,18,10,16,22,22,22,22,22,
		40,40,40,40,40,40,10,40,40,40,25,40,40,40,40,40,40,24,40,40,40,10,40,40,40,40,40,40,
		27,27,27,27,27,13,10,11,13,40,25,40,40,40,40,40,40,24,40,11,13,10,11,27,27,27,27,27,
		40,40,40,40,40,24,10,14,15,40,36,22,22,22,22,22,22,38,40,14,15,10,25,40,40,40,40,40,
		40,40,40,40,40,24,10,14,15,40,40,40,40,40,40,40,40,40,40,14,15,10,25,40,40,40,40,40,
		40,40,40,40,40,24,10,14,15,40,11,12,12,12,12,12,12,13,40,14,15,10,25,40,40,40,40,40,
		21,22,22,22,22,18,10,16,18,40,16,17,17,29,19,17,17,18,40,16,18,10,16,22,22,22,22,23,
		24,10,10,10,10,10,10,10,10,10,10,10,10,14,15,10,10,10,10,10,10,10,10,10,10,10,10,25,
		24,10,11,12,12,13,10,11,12,12,12,13,10,14,15,10,11,12,12,12,13,10,11,12,12,13,10,25,
		24,10,16,17,29,15,10,16,17,17,17,18,10,16,18,10,16,17,17,17,18,10,14,19,17,18,10,25,
		24,30,10,10,14,15,10,10,10,10,10,10,10,40,40,10,10,10,10,10,10,10,14,15,10,10,30,25,
		91,12,13,10,14,15,10,11,13,10,11,12,12,12,12,12,12,13,10,11,13,10,14,15,10,11,12,93,
		92,17,18,10,16,18,10,14,15,10,16,17,17,29,19,17,17,18,10,14,15,10,16,18,10,16,17,94,
		24,10,10,10,10,10,10,14,15,10,10,10,10,14,15,10,10,10,10,14,15,10,10,10,10,10,10,25,
		24,10,11,12,12,12,12,99,39,12,12,13,10,14,15,10,11,12,12,99,39,12,12,12,12,13,10,25,
		24,10,16,17,17,17,17,17,17,17,17,18,10,16,18,10,16,17,17,17,17,17,17,17,17,18,10,25,
		24,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,25,
		26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,
		40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,
		40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,
	});
	board.get(6, 1) = '0';
	board.get(16, 1) = '0';
	Grid2<uint8_t> paletteBoard(28, 36, {
		02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,
		02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,
		02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,03,03,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,
		02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,
		02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,02,
	});

	std::map<uint8_t, PaletteImage> tileTypes {
		{ 0, std::move(zero) },
		{ 1, std::move(one) },
		{ 2, std::move(two) },
		{ 3, std::move(three) },
		{ 4, std::move(four) },
		{ 5, std::move(five) },
		{ 6, std::move(six) },
		{ 7, std::move(seven) },
		{ 8, std::move(eight) },
		{ 9, std::move(nine) },

		{ '0', std::move(_zero)},
		{ '1', std::move(_one)},
		{ '2', std::move(_two)},
		{ '3', std::move(_three)},
		{ '4', std::move(_four)},
		{ '5', std::move(_five)},
		{ '6', std::move(_six)},
		{ '7', std::move(_seven)},
		{ '8', std::move(_eight)},
		{ '9', std::move(_nine)},

		{ 'A', std::move(A) },
		{ 'B', std::move(B) },
		{ 'C', std::move(C) },
		{ 'D', std::move(D) },
		{ 'E', std::move(E) },
		{ 'F', std::move(F) },
		{ 'G', std::move(G) },
		{ 'H', std::move(H) },
		{ 'I', std::move(I) },
		{ 'J', std::move(J) },
		{ 'K', std::move(K) },
		{ 'L', std::move(L) },
		{ 'M', std::move(M) },
		{ 'N', std::move(N) },
		{ 'O', std::move(O) },
		{ 'P', std::move(P) },
		{ 'Q', std::move(Q) },
		{ 'R', std::move(R) },
		{ 'S', std::move(S) },
		{ 'T', std::move(T) },
		{ 'U', std::move(U) },
		{ 'V', std::move(V) },
		{ 'W', std::move(W) },
		{ 'X', std::move(X) },
		{ 'Y', std::move(Y) },
		{ 'Z', std::move(Z) },
		{ ' ', PaletteImage::none },
		{ '.', std::move(period) },
		{ ',', std::move(comma) },
		{ '!', std::move(exclamation) },
		{ '"', std::move(quote) },

		{ 11, std::move(reg_1) },
		{ 12, std::move(reg_2) },
		{ 13, std::move(reg_3) },
		{ 14, std::move(reg_4) },
		{ 15, std::move(reg_5) },
		{ 16, std::move(reg_6) },
		{ 17, std::move(reg_7) },
		{ 18, std::move(reg_8) },

		{ 21, std::move(big_1) },
		{ 22, std::move(big_2) },
		{ 23, std::move(big_3) },
		{ 24, std::move(big_4) },
		{ 25, std::move(big_5) },
		{ 26, std::move(big_6) },
		{ 27, std::move(big_7) },
		{ 28, std::move(big_8) },

		{ 31, std::move(sqr_1) },
		{ 35, std::move(sqr_2) },
		{ 37, std::move(sqr_3) },
		{ 36, std::move(sqr_6) },
		{ 38, std::move(sqr_8) },

		{ 91, std::move(unq_1) },
		{ 92, std::move(unq_2) },
		{ 93, std::move(unq_3) },
		{ 94, std::move(unq_4) },
		{ 95, std::move(unq_5) },
		{ 96, std::move(unq_6) },
		{ 97, std::move(unq_7) },
		{ 98, std::move(unq_8) },

		{ 19, std::move(cnv_1) },
		{ 29, std::move(cnv_2) },
		{ 39, std::move(cnv_3) },
		{ 99, std::move(cnv_4) },

		{ 10, std::move(lil_food) },
		{ 20, std::move(mid_food) },
		{ 30, std::move(big_food) },
		{ 40, PaletteImage::none },
		{ 60, std::move(wall_fill) }
	};

	std::vector<size_t> POWER_PELLET_INDICES;
	{
		uint8_t* data = board.data();
		for (size_t i = 0; i < board.size(); i++)
			if (data[i] == 30)
				POWER_PELLET_INDICES.push_back(i);
	}

	PacmanToolbox& toolbox = PacmanToolbox::getInstance();

	std::vector<Enemy> enemies{
		Enemy(toolbox.palettes[5], Vector2(14.5, 14.5)),
		Enemy(toolbox.palettes[6], Vector2(14.5, 14.5)),
		Enemy(toolbox.palettes[17], Vector2(14.5, 14.5)),
		Enemy(toolbox.palettes[18], Vector2(14.5, 14.5)),
	};

	const uint16_t BLINKY_SCATTER_TILE = Vector2i(25, 0).toInteger();
	const uint16_t INKY_SCATTER_TILE = Vector2i(27, 35).toInteger();
	const uint16_t PINKY_SCATTER_TILE = Vector2i(2, 0).toInteger();
	const uint16_t CLYDE_SCATTER_TILE = Vector2i(0, 35).toInteger();

	Player player(Vector2(14.5, 20.5));
	Vector2i position;
	SDL_GetMouseState(&position.x, &position.y);
	position /= 16;
	enemies[0].calculateTargetTile = [&](const Enemy& entity)->uint16_t{
		if (entity.state == Enemy::CHASE)
			return position.toInteger();
		else
			return BLINKY_SCATTER_TILE;
	};
	enemies[1].calculateTargetTile = [&](const Enemy& entity)->uint16_t {
		if (entity.state == Enemy::CHASE) {
			uint16_t addVector = player.getDirection() * 2;
			Vector2i entityPos(enemies[0].getPosition());
			return (entityPos + (position + Vector2i(addVector) - entityPos) * 2).toInteger();
		} else
			return INKY_SCATTER_TILE;
	};
	enemies[2].calculateTargetTile = [&](const Enemy& entity)->uint16_t {
		if (entity.state == Enemy::CHASE) {
			uint16_t addVector = player.getDirection() * 4;
			return (position + Vector2i(addVector)).toInteger();
		} else
			return PINKY_SCATTER_TILE;
	};
	enemies[3].calculateTargetTile = [&](const Enemy& entity)->uint16_t {
		if (entity.state == Enemy::CHASE) {
			if ((Vector2i(entity.getPosition()) - position).magnitude() <= 8.0)
				return CLYDE_SCATTER_TILE;
			else
				return position.toInteger();
		} else
			return CLYDE_SCATTER_TILE;
	};

	//enemies[2].state = Enemy::FRIGHTENED;
	//enemies[3].state = Enemy::EATEN;

	PaletteImageStamper* testStamper;

	if (SDL_Init(SDL_INIT_EVERYTHING) < 0)
	{
		printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
	}
	else
	{
		Interface interface(SDL_CreateWindow("Pac-Man", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 28 * 16, 36 * 16, 0), [&](Interface& interface, SDL_Renderer* renderer)-> void {
			toolbox.tileBatcher = new PaletteTileBatcher(renderer);

			toolbox.tileBatcher->setGrid(std::move(board));
			toolbox.tileBatcher->setTileTypes(std::move(tileTypes));
			toolbox.tileBatcher->setPaletteGrid(std::move(paletteBoard));
			toolbox.tileBatcher->setPaletteTypes(toolbox.palettes);

			std::string text = "   \1UP   HIGH SCORE";
			std::move(text.data(), text.data() + text.length(), toolbox.tileBatcher->gridData());

			toolbox.ghostUpStamper = new PaletteImageStamper(renderer, std::move(ghost_up));
			toolbox.ghostDownStamper = new PaletteImageStamper(renderer, std::move(ghost_down));
			toolbox.ghostLeftStamper = new PaletteImageStamper(renderer, std::move(ghost_left));
			toolbox.ghostRightStamper = new PaletteImageStamper(renderer, std::move(ghost_right));
			toolbox.ghostFrightStamper = new PaletteImageStamper(renderer, std::move(ghost_fright));
			toolbox.ghostLegsStamper1 = new PaletteImageStamper(renderer, std::move(ghost_legs1));
			toolbox.ghostLegsStamper2 = new PaletteImageStamper(renderer, std::move(ghost_legs2));
			toolbox.ghostLegsStamper3 = new PaletteImageStamper(renderer, std::move(ghost_legs3));
			toolbox.ghostLegsStamper4 = new PaletteImageStamper(renderer, std::move(ghost_legs4));
			toolbox.ghostLegsAnim1 = new PaletteAnimationStamper(std::vector<PaletteImageStamper*>{ toolbox.ghostLegsStamper1, toolbox.ghostLegsStamper3 }, 0.15);
			toolbox.ghostLegsAnim2 = new PaletteAnimationStamper(std::vector<PaletteImageStamper*>{ toolbox.ghostLegsStamper2, toolbox.ghostLegsStamper4 }, 0.15);

			auto now = std::chrono::steady_clock::now();
			toolbox.ghostLegsAnim1->play(now, -1);
			toolbox.ghostLegsAnim2->play(now, -1);

			testStamper = new PaletteImageStamper(renderer, PaletteImage(1, 1, (uint8_t)1));
		});
		interface.frame.setColor(Color3::black);
;		interface.onDraw = [&](Interface& interface, Image4& screen, const Rect2<double>& bounds) -> void {
			toolbox.tileBatcher->draw(screen, Rect2<double>{0.0, 0.0, 16, 16});

			toolbox.ghostLegsAnim1->update();
			toolbox.ghostLegsAnim2->update();
			for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
				iterator->draw(interface, screen);
			}
		};
		interface.onDrawSDL = [&](Interface& interface, SDL_Renderer* renderer, const Rect2<double>& bounds) -> void {
			toolbox.tileBatcher->draw(renderer, Rect2<double>{0.0, 0.0, 16, 16});

			toolbox.ghostLegsAnim1->update();
			toolbox.ghostLegsAnim2->update();
			for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
				iterator->draw(interface, renderer);
				Vector2i targetTile(iterator->getTargetTile());
				testStamper->draw(iterator->basePalette, renderer, Rect2<double>{targetTile.x * 16.0, targetTile.y * 16.0, 16.0, 16.0});
			}

			/*SDL_SetRenderDrawColor(renderer, 30, 30, 30, 125);
			SDL_Rect rect{ 0, 0, 28 * 16, 36 * 16 };
			SDL_RenderFillRect(renderer, &rect);
			SDL_SetRenderDrawColor(renderer, 0, 0, 0, 175);
			for (int i = 0; i < 100; i++) {
				SDL_Rect rect{ 0, i * 7.5 + 3, 28 * 16, 2.5 };
				SDL_RenderFillRect(renderer, &rect);
			}*/
		};


		GameState gameState;
		auto chase = [&]()->void {
			gameState.ghostmode++;
			for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
				iterator->state = Enemy::CHASE;
				iterator->reverseDirection();
			}
		};
		auto scatter = [&]()->void {
			gameState.ghostmode++;
			for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
				iterator->state = Enemy::SCATTER;
				iterator->reverseDirection();
			}
		};

		uint8_t* paletteData = toolbox.tileBatcher->paletteGridData();
		interface.onUpdate = [&](Interface& interface, double delta) -> void {
			if (Math::dmod(interface.secondsElapsed(), 0.5) >= 0.25 && paletteData[3] == 2)
				std::fill(paletteData + 3, paletteData + 6, 10);
			else if (Math::dmod(interface.secondsElapsed(), 0.5) < 0.25 && paletteData[3] == 10)
				std::fill(paletteData + 3, paletteData + 6, 2);
			for (size_t i : POWER_PELLET_INDICES) {
				if (Math::dmod(interface.secondsElapsed(), 1.0 / 3.0) >= 1.0 / 6.0 && paletteData[i] == 1)
					paletteData[i] = 4;
				else if (Math::dmod(interface.secondsElapsed(), 1.0 / 3.0) < 1.0 / 6.0 && paletteData[i] == 4)
					paletteData[i] = 1;
			}
			for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
				iterator->update(delta);
			}

			double elapsedTime = gameState.levelStart.tock();
			switch (gameState.ghostmode) {
			case 0:
				gameState.ghostmode++;
				for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator)
					iterator->state = Enemy::SCATTER;
				break;
			case 1:
				if (gameState.level < 4) {
					if (elapsedTime >= 7.0)
						chase();
				} else if (elapsedTime >= 5.0)
						chase();
				break;
			case 2:
				if (gameState.level < 4) {
					if (elapsedTime >= 27.0)
						scatter();
				} else if (elapsedTime >= 25.0)
						scatter();
				break;
			case 3:
				if (gameState.level < 4) {
					if (elapsedTime >= 34.0)
						chase();
				} else if (elapsedTime >= 30.0)
						chase();
				break;
			case 4:
				if (gameState.level < 4) {
					if (elapsedTime >= 54.0)
						scatter();
				} else if (elapsedTime >= 50.0)
						scatter();
				break;
			case 5:
				if (gameState.level < 4) {
					if (elapsedTime >= 59.0)
						chase();
				} else if (elapsedTime >= 55.0)
						chase();
				break;
			case 6:
				if (gameState.level == 0) {
					if (elapsedTime >= 79.0)
						scatter();
				} else if (elapsedTime >= 1092.0)
						scatter();
				break;
			case 7:
				if (gameState.level == 0) {
					if (elapsedTime >= 84.0)
						chase();
				} else if (elapsedTime >= 1092.0 + 1.0 / 60.0)
						chase();
				break;
			}
		};

		if (interface.window == nullptr)
		{
			printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			SDL_Quit();
			return;
		}
		else
		{
			uint8_t* paletteData = toolbox.tileBatcher->paletteGridData();
			bool running = true;
			while (running) {
				SDL_Event ev;
				while (SDL_PollEvent(&ev))
				{
					if ((SDL_QUIT == ev.type) ||
						(SDL_KEYDOWN == ev.type && SDL_SCANCODE_ESCAPE == ev.key.keysym.scancode))
					{
						running = false;
						break;
					}
					else if (SDL_KEYDOWN == ev.type) {
						if (SDL_SCANCODE_1 == ev.key.keysym.scancode && toolbox.tileBatcher->paletteAt(0, 2) > 0) {
							std::fill(paletteData + 28 * 2, paletteData + paletteBoard.size(), toolbox.tileBatcher->paletteAt(0, 2) - 1);
						} else if (SDL_SCANCODE_2 == ev.key.keysym.scancode && toolbox.tileBatcher->paletteAt(0, 2) < toolbox.palettes.size() - 1) {
							std::fill(paletteData + 28 * 2, paletteData + paletteBoard.size(), toolbox.tileBatcher->paletteAt(0, 2) + 1);
						} else if (SDL_SCANCODE_3 == ev.key.keysym.scancode) {
							for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
								iterator->state = Enemy::CHASE;
							}
						} else if (SDL_SCANCODE_4 == ev.key.keysym.scancode) {
							for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
								iterator->state = Enemy::SCATTER;
							}
						} else if (SDL_SCANCODE_5 == ev.key.keysym.scancode) {
							for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
								iterator->state = Enemy::FRIGHTENED;
							}
						} else if (SDL_SCANCODE_6 == ev.key.keysym.scancode) {
							for (auto iterator = enemies.begin(); iterator != enemies.end(); ++iterator) {
								iterator->state = Enemy::EATEN;
							}
						}
					}
				}

				SDL_GetMouseState(&position.x, &position.y);
				position /= 16;
				interface.update();
				interface.drawSDL();
			}
		}
	}
	SDL_Quit();
}